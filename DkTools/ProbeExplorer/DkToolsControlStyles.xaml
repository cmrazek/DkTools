 <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:vs_shell="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
					xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
	
	<!-- https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.platformui.environmentcolors(v=vs.110).aspx -->
	
	<!-- Region Label -->
	<Style TargetType="{x:Type Label}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
	</Style>
	<!-- Endregion -->
	
	<!-- Region TextBlock -->
	<Style TargetType="{x:Type TextBlock}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
	</Style>
	<!-- Endregion -->

	<!-- Region ListBox -->
	<Style TargetType="{x:Type ListBox}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
		<Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"/>
	</Style>
	<Style TargetType="{x:Type ListBoxItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border x:Name="_ListViewItemBorder" Padding="2" SnapsToDevicePixels="True">
						<ContentPresenter/>
					</Border>
					<ControlTemplate.Triggers>
						<!-- Mouse Over -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource self}}" Value="True"/>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource self}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="_ListViewItemBorder" Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.DropDownMouseOverBackgroundBeginBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.DropDownMouseOverTextBrushKey}}"/>
						</MultiDataTrigger>
						
						<!-- Selected and item focused -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource self}}" Value="True"/>
								<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource self}}" Value="True"/>
								<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="_ListViewItemBorder" Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightTextBrushKey}}"/>
						</MultiDataTrigger>
						
						<!-- Selected and listbox focused -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource self}}" Value="True"/>
								<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource self}}" Value="False"/>
								<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="_ListViewItemBorder" Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightTextBrushKey}}"/>
						</MultiDataTrigger>
						
						<!-- Selected but neither listbox nor item have focused (show as dimmed) -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource self}}" Value="True"/>
								<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource self}}" Value="False"/>
								<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="_ListViewItemBorder" Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.DropDownMouseOverBackgroundBeginBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.DropDownMouseOverTextBrushKey}}"/>
						</MultiDataTrigger>
						
						<!-- Not selected or mouse over'd -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource self}}" Value="False"/>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource self}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="_ListViewItemBorder" Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
						</MultiDataTrigger>
						
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- Endregion ListBox -->

	<!-- Region TreeView -->
	<Style TargetType="{x:Type TreeView}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
		<Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"/>
	</Style>
	<ControlTemplate x:Key="ProbeExplorerTreeViewControlTemplate" TargetType="{x:Type TreeView}">
		<Border x:Name="Bd"
				BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"
				BorderThickness="{TemplateBinding BorderThickness}"
				SnapsToDevicePixels="True"
				>
			<ScrollViewer x:Name="_tv_scrollviewer_"
						  Background="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBackgroundBrushKey}}"
						  CanContentScroll="False"
						  Focusable="False"
						  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
						  Padding="{TemplateBinding Padding}"
						  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
						  >
				<ItemsPresenter/>
			</ScrollViewer>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
			</Trigger>
			<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
				<Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="True"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ExpandCollapseToggleStyle"
		TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable"
			Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Width="15" Height="13" Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Collapsed">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Expanded">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked" />
								<VisualState x:Name="Indeterminate" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Path x:Name="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="1,1,1,1" Data="M 4 0 L 8 4 L 4 8 Z">
							<Path.Fill>
								<SolidColorBrush Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundColorKey}}" />
							</Path.Fill>
							<Path.Stroke>
								<SolidColorBrush Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxGlyphColorKey}}" />
							</Path.Stroke>
						</Path>
						<Path x:Name="Expanded" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="1,1,1,1" Data="M 0 4 L 8 4 L 4 8 Z" Visibility="Hidden">
							<Path.Fill>
								<SolidColorBrush Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxGlyphColorKey}}" />
							</Path.Fill>
							<!--<Path.Stroke>
								<SolidColorBrush Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxGlyphColorKey}}" />
							</Path.Stroke>-->
						</Path>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TreeViewItemFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="0,0,0,0" StrokeThickness="5" Stroke="Black" StrokeDashArray="1 2" Opacity="0" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type TreeViewItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="19"
								Width="Auto" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightColorKey}}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="SelectedInactive">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightColorKey}}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ExpansionStates">
								<VisualState x:Name="Expanded">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Collapsed" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
						<Border x:Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Width" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Height" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
						</MultiTrigger>
						<!--<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightBrushKey}}"/>
						</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- Endregion TreeView -->

	<!-- Region ComboBox -->
	<Style TargetType="ComboBox">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxTextBrushKey}}"/>
	</Style>
	<ControlTemplate x:Key="DkToolsComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
					<Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxPopupBorderBrushKey}}" BorderThickness="1"
							Background="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxPopupBackgroundBeginBrushKey}}">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
									<Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Grid>
						</ScrollViewer>
					</Border>
				</Themes:SystemDropShadowChrome>
			</Popup>
			<ToggleButton x:Name="toggleButton" BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"
						  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2"
						  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
				<ToggleButton.Style>
					<Style TargetType="{x:Type ToggleButton}">
						<Setter Property="OverridesDefaultStyle" Value="True"/>
						<Setter Property="IsTabStop" Value="False"/>
						<Setter Property="Focusable" Value="False"/>
						<Setter Property="ClickMode" Value="Press"/>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<Border x:Name="templateRoot"
											BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"
											BorderThickness="{TemplateBinding BorderThickness}"
											SnapsToDevicePixels="True"
											Background="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBackgroundBrushKey}}">
										<Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
											<Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxGlyphBrushKey}}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
										</Border>
									</Border>
									<ControlTemplate.Triggers>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
												<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
												<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
												<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
											</MultiDataTrigger.Conditions>
											<Setter Property="Background" TargetName="templateRoot" Value="White"/>
											<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBorderBrushKey}}"/>
											<Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
											<Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
										</MultiDataTrigger>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter Property="Fill" TargetName="Arrow" Value="Black"/>
										</Trigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
												<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
											</MultiDataTrigger.Conditions>
											<Setter Property="Background" TargetName="templateRoot">
												<Setter.Value>
													<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
														<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBackgroundBeginColorKey}}" Offset="0"/>
														<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBackgroundEndColorKey}}" Offset="1"/>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
											<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBorderBrushKey}}"/>
										</MultiDataTrigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
												<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
											</MultiDataTrigger.Conditions>
											<Setter Property="Background" TargetName="templateRoot" Value="White"/>
											<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBorderBrushKey}}"/>
											<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBackgroundBrushKey}}"/>
											<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"/>
										</MultiDataTrigger>
										<Trigger Property="IsPressed" Value="True">
											<Setter Property="Fill" TargetName="Arrow" Value="Black"/>
										</Trigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
												<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
											</MultiDataTrigger.Conditions>
											<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseDownBackgroundBrushKey}}"/>
											<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseDownBorderBrushKey}}"/>
										</MultiDataTrigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
												<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
											</MultiDataTrigger.Conditions>
											<Setter Property="Background" TargetName="templateRoot" Value="White"/>
											<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseDownBorderBrushKey}}"/>
											<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseDownBackgroundBrushKey}}"/>
											<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseDownBorderBrushKey}}"/>
										</MultiDataTrigger>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledGlyphColorKey}}"/>
										</Trigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
												<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
											</MultiDataTrigger.Conditions>
											<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledBackgroundBrushKey}}"/>
											<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledBorderColorKey}}"/>
										</MultiDataTrigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
												<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
											</MultiDataTrigger.Conditions>
											<Setter Property="Background" TargetName="templateRoot" Value="White"/>
											<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledBorderColorKey}}"/>
											<Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
											<Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
										</MultiDataTrigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</ToggleButton.Style>
			</ToggleButton>
			<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}"
							  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
				<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
				<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
			</Trigger>
			<Trigger Property="HasItems" Value="False">
				<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="True"/>
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
			</MultiTrigger>
			<Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
				<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
				<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Border" Padding="2" SnapsToDevicePixels="true" Background="Transparent">
						<ContentPresenter />
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBackgroundBrushKey}}"/>
							<Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxTextBrushKey}}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBackgroundBeginBrushKey}}"/>
							<Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverTextBrushKey}}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxSelectionBrushKey}}"/>
							<Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightTextBrushKey}}"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- Endregion ComboBox -->
	
	<!-- Region Button -->
	<ControlTemplate x:Key="DkToolsButtonControlTemplate" TargetType="{x:Type Button}">
		<Border x:Name="border"
				BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"
				BorderThickness="{TemplateBinding BorderThickness}"
				Background="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBackgroundBrushKey}}"
				SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
							  Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
							  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsDefaulted" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
				<Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBackgroundBeginBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxTextBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBackgroundBeginBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxTextBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxTextBrushKey}}"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonFaceBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxTextBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledBackgroundBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledBorderBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledTextBrushKey}}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<!-- Endregion -->
	
	<!-- Region TabControl -->
	<ControlTemplate x:Key="DkToolsTabControlControlTemplate" TargetType="{x:Type TabControl}">
		<Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
			<Grid.ColumnDefinitions>
				<ColumnDefinition x:Name="ColumnDefinition0"/>
				<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
				<RowDefinition x:Name="RowDefinition1" Height="*"/>
			</Grid.RowDefinitions>
			<TabPanel x:Name="HeaderPanel" Background="Transparent" Grid.Column="0" IsItemsHost="True" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
			<Border x:Name="ContentPanel"
					BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"
					BorderThickness="{TemplateBinding BorderThickness}"
					Background="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
					Grid.Column="0"
					KeyboardNavigation.DirectionalNavigation="Contained"
					Grid.Row="1"
					KeyboardNavigation.TabIndex="2"
					KeyboardNavigation.TabNavigation="Local">
				<ContentPresenter x:Name="PART_SelectedContentHost"
								  ContentTemplate="{TemplateBinding SelectedContentTemplate}"
								  Content="{TemplateBinding SelectedContent}"
								  ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
								  ContentSource="SelectedContent"
								  Margin="{TemplateBinding Padding}"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								  />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="TabStripPlacement" Value="Bottom">
				<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
				<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
				<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
				<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Left">
				<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
				<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
				<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
				<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
				<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
				<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
				<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
				<Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Right">
				<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
				<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
				<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
				<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
				<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
				<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
				<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemGrayTextBrushKey}}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="DkToolsTabItemControlTemplate" TargetType="{x:Type TabItem}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="True">
			<Border x:Name="mainBorder" BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="0">
				<Border x:Name="innerBorder" BorderBrush="Transparent" BorderThickness="1,1,1,0" Background="White" Margin="-1" Opacity="0"/>
			</Border>
			<ContentPresenter x:Name="contentPresenter"
							  ContentTemplate="{TemplateBinding HeaderTemplate}"
							  Content="{TemplateBinding Header}"
							  ContentStringFormat="{TemplateBinding HeaderStringFormat}"
							  ContentSource="Header"
							  Focusable="False"
							  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"
							  Margin="{TemplateBinding Padding}"
							  RecognizesAccessKey="True"
							  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"
							  />
		</Grid>
		<ControlTemplate.Triggers>
			
			<!-- Mouse Over -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Background" TargetName="mainBorder">
					<Setter.Value>
						<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
							<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBackgroundBeginColorKey}}" Offset="0"/>
							<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBackgroundEndColorKey}}" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBorderBrushKey}}"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Background" TargetName="mainBorder">
					<Setter.Value>
						<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
							<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBackgroundBeginColorKey}}" Offset="0"/>
							<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBackgroundEndColorKey}}" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBorderBrushKey}}"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Background" TargetName="mainBorder">
					<Setter.Value>
						<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
							<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBackgroundBeginColorKey}}" Offset="0"/>
							<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBackgroundEndColorKey}}" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBorderBrushKey}}"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Background" TargetName="mainBorder">
					<Setter.Value>
						<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
							<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBackgroundBeginColorKey}}" Offset="0"/>
							<GradientStop Color="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBackgroundEndColorKey}}" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabMouseOverBorderBrushKey}}"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
			</MultiDataTrigger>
			
			<!-- Disabled -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
				<Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowButtonInactiveBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
				<Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowButtonInactiveBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
				<Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowButtonInactiveBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
				<Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowButtonInactiveBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
			</MultiDataTrigger>

			<!-- Not Selected -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
				<Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabGradientBeginBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabTextBrushKey}}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
				<Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabGradientBeginBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabTextBrushKey}}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
				<Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabGradientBeginBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabTextBrushKey}}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
				<Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabGradientBeginBrushKey}}"/>
				<Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabBorderBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabTextBrushKey}}"/>
			</MultiDataTrigger>

			<!-- Selected -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Panel.ZIndex" Value="1"/>
				<Setter Property="Margin" Value="-2,-2,0,-2"/>
				<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
				<Setter Property="Background" TargetName="innerBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabSelectedTabBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabSelectedTextBrushKey}}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Panel.ZIndex" Value="1"/>
				<Setter Property="Margin" Value="-2,0,-2,-2"/>
				<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
				<Setter Property="Background" TargetName="innerBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabSelectedTabBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabSelectedTextBrushKey}}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Panel.ZIndex" Value="1"/>
				<Setter Property="Margin" Value="0,-2,-2,-2"/>
				<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
				<Setter Property="Background" TargetName="innerBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabSelectedTabBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabSelectedTextBrushKey}}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
					<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="Panel.ZIndex" Value="1"/>
				<Setter Property="Margin" Value="-2,-2,-2,0"/>
				<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
				<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
				<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
				<Setter Property="Background" TargetName="innerBorder" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabSelectedTabBrushKey}}"/>
				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTabSelectedTextBrushKey}}"/>
			</MultiDataTrigger>

		</ControlTemplate.Triggers>
	</ControlTemplate>
	<!-- Endregion -->

	<!-- Region TextBox -->
	<Style TargetType="{x:Type TextBox}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
		<Setter Property="CaretBrush" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxTextBrushKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"/>
	</Style>
	<ControlTemplate x:Key="DkToolsTextBoxControlTemplate" TargetType="{x:Type TextBox}">
		<Border x:Name="border"
				BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBorderBrushKey}}"
				BorderThickness="{TemplateBinding BorderThickness}"
				Background="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxBackgroundBrushKey}}"
				SnapsToDevicePixels="True"
				>
			<ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" TargetName="border" Value="0.56"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledTextBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseOverBorderBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxMouseDownBorderBrushKey}}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
     
     
     
     
     
    <ControlTemplate x:Key="DkToolsNormalButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border"
         BorderBrush="{DynamicResource {x:Static vs_shell:EnvironmentColors.BrandedUIBorderBrushKey}}"
         BorderThickness="{TemplateBinding BorderThickness}"
         Background="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonFaceBrushKey}}"
         TextElement.Foreground="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"
         SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
             Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
                <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonFaceBrushKey}}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightBrushKey}}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.BrandedUIBorderBrushKey}}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonFaceBrushKey}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.BrandedUIBorderBrushKey}}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonFaceBrushKey}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.BrandedUIBorderBrushKey}}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>





    <ControlTemplate x:Key="DkToolsIconButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border"
         BorderBrush="Transparent"
         Background="Transparent"
         TextElement.Foreground="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"
         SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
             Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="Transparent"/>
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>




    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DkToolsCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonFaceBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.BrandedUIBorderBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                      Fill="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"
                                      Margin="1" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark"
                                           Fill="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"
                                           Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonFaceBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledBorderBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledTextBrushKey}}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ComboBoxDisabledTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonHighlightBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemHighlightBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark"
                                    Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.SystemButtonTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Endregion -->

</ResourceDictionary>
